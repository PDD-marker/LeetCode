题解1：
使用标记数组法（常规解法）：
public void setZeroes(int[][] matrix) {
    int m = matrix.length;
    int n = matrix[0].length;
    boolean[] row = new boolean [m]; //用来记录该行是否存在0
    boolean[] column = new boolean[n]; //用来记录该列是否存在0
    for(int i = 0; i < m; i++) {
        for(int j = 0; j < n; j++) {
             //注意：当有行为0时或者有列为0时，不可以直接跳过，因为不确定另一个方向是否标记过
            if(matrix[i][j] == 0) {
                row[i] = true;
                column[j] = true;
            }
        }
    }
    for(int i = 0; i < m; i++) {
        for(int j = 0; j < n; j++) {
            if(row[i] || column[j]) {
                matrix[i][j] = 0;
            }
        }
    }
}

题解2：
优化题解1的空间复杂度
可以利用第一行和第一列来表示是否为0，而对于第一行和第一列的情况，可以用两个变量来表示
public void setZeroes(int[][] matrix) {
    boolean row = false; //表示第一行是否存在0
    boolean column = false; //表示第一列是否存在0
    for(int i = 0; i < matrix[0].length; i++) {
        if(matrix[0][i] == 0) {
            row = true;
        }
    }
    for(int i = 0; i < matrix.length; i++) {
        if(matrix[i][0] == 0) {
            column = true;
        }
    }
    for(int i = 1; i < matrix.length; i++) {
        for(int j = 1; j < matrix[0].length; j++) {
            if(matrix[i][j] == 0) {
                matrix[0][j] = 0;
                matrix[i][0] = 0;
            }
        }
    }
    for(int i = 1; i < matrix.length; i++) {
        for(int j = 1; j < matrix[0].length; j++) {
            if(matrix[0][j] == 0 || matrix[i][0] == 0) {
                matrix[i][j] = 0;
            }
        }
    }
    if(row) {
        for(int i = 0; i < matrix[0].length; i++) {
            matrix[0][i] = 0;
        }
    }
    if(column) {
        for(int i = 0; i < matrix.length; i++) {
            matrix[i][0] = 0;
        }
    }
}
